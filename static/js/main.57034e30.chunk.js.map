{"version":3,"sources":["components/ColumnHeader.tsx","components/Card.tsx","components/AddCard.tsx","components/Column.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ColumnHeader","title","color","style","padding","backgroundColor","textAlign","lineHeight","margin","Card","card","id","text","isLeft","isRight","handleBack","handleNext","display","justifyContent","background","onClick","flex","AddCard","handleClick","e","preventDefault","window","prompt","handleAddCard","Column","column","addToColumn","updateColumn","CardWrapper","width","className","cards","map","cardItem","newCard","uuidv4","console","log","styled","div","startingColumns","App","useState","columns","setColumns","colId","col","newCards","push","cardId","left","cardIndex","findIndex","sendCardBackward","sendCardForward","slice","concat","length","newCols","flag","i","minHeight","BoardWrapper","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57034e30.chunk.js","sourcesContent":["import React from 'react'\n\ninterface IProps {\n  title: string\n  color: string\n}\n\nconst ColumnHeader: React.FC<IProps> = ({\n  title,\n  color\n}) => {\n  return (\n    <header style={{padding:'10px', backgroundColor: color, textAlign:'center', lineHeight:'1.5'}}>\n      <h2 style={{margin:0,padding:0}}>{title}</h2>\n    </header>\n  )\n}\n\nexport default ColumnHeader\n","import React from 'react'\n\ninterface IProps {\n  card: any\n  isLeft?: boolean\n  isRight?: boolean\n  handleBack(id: string): void\n  handleNext(id: string): void\n}\n\nconst Card: React.FC<IProps> = ({\n  card: {\n    id,\n    text\n  },\n  isLeft,\n  isRight,\n  handleBack,\n  handleNext\n}) => {\n\n  return (\n    <div style={{display:'flex', justifyContent:'space-between', background:'white', padding:'20px', textAlign:'center'}}>\n      {!isLeft && (\n        <button onClick={() => handleBack(id)}>Back</button>\n      )}\n      <div style={{flex:'1'}}>{text}</div>\n      {!isRight && (\n        <button onClick={() => handleNext(id)}>Next</button>\n      )}\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\n\n\ninterface IProps {\n  handleClick(text: string): void\n}\n\nconst AddCard: React.FC<IProps> = ({\n  handleClick\n}) => {\n\n  const handleAddCard = (e: any) => {\n    e.preventDefault()\n    let text = window.prompt('Please enter text')\n    handleClick(text!)\n  }\n\n  return (\n    <div>\n      <a onClick={(e) => handleAddCard(e)}>+ Add Card</a>\n    </div>\n  )\n}\n\nexport default AddCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ColumnHeader from './ColumnHeader'\nimport Card from './Card'\nimport AddCard from './AddCard'\nimport uuidv4 from 'uuid'\n\nexport interface Card {\n  id: string\n  text: string\n}\nexport interface Column {\n  id: string\n  title: string\n  color: string\n  cards: Card[]\n  isLeft?: boolean\n  isRight?: boolean\n}\n\ninterface IProps {\n  column: Column\n  updateColumn(id: string, colId: string, left?:boolean, right?:boolean): void\n  addToColumn(newCard: Card, colId: string): void\n}\n\nconst Column: React.FC<IProps> = ({\n  column,\n  addToColumn,\n  updateColumn,\n}) => {\n  // could try to use state and set state here\n\n  const handleClick = (text: string) => {\n    let newCard = {\n      id: uuidv4(),\n      text\n    }\n    console.log('new card', newCard)\n    addToColumn(newCard, column.id)\n  }\n\n  const handleBack = (id: string) => {\n    updateColumn(id, column.id, true)\n  }\n\n  const handleNext = (id: string) => {\n    updateColumn(id, column.id, false)\n  }\n\n  return (\n    <CardWrapper style={{width:'25%'}} className={``}>\n      <ColumnHeader color={column.color} title={column.title} />\n      <div>\n        {column.cards.map(cardItem =>\n          <Card handleBack={handleBack} handleNext={handleNext}\n            isLeft={column.isLeft} isRight={column.isRight} card={cardItem} />)}\n      </div>\n      <AddCard handleClick={handleClick} />\n    </CardWrapper>\n  )\n}\n\nexport default Column\n\nconst CardWrapper = styled.div`\n  flex: 1;\n  margin-right: 25px;\n`","import React, { useState } from 'react';\nimport styled from 'styled-components'\nimport uuidv4 from 'uuid'\nimport Column, { Card } from './components/Column'\n\n\nconst startingColumns = [\n  {\n    id: uuidv4(),\n    title: 'Winnie',\n    color: \"#8E6E95\",\n    isLeft: true,\n    cards: [\n      { id:'fdklsjafsd', text: 'start at col1'},\n      { id:'fasdfdfdf', text: 'start at col1'}\n    ],\n  },\n  {\n    id: uuidv4(),\n    title: 'Bob',\n    color: \"#39A59C\",\n    cards: [\n      { id:'afsdfsddsf', text: 'start at col2'},\n      { id:'asfsdfsd', text: 'start at col2'}\n    ],\n  },\n  {\n    id: uuidv4(),\n    title: 'Thomas',\n    color: \"#344759\",\n    cards: [\n      { id:'asfsdfdsfds', text: 'start at col3'},\n      { id:'ghhjfggd', text: 'start at col3'}\n    ],\n  },\n  {\n    id: uuidv4(),\n    title: 'George',\n    color: \"#E8741E\",\n    isRight: true,\n    cards: [\n      { id:'gfhfhgfgfdg', text: 'start at col4'},\n      { id:'hfyuyjhgs', text: 'start at col4'}\n    ]\n  },\n]\n\nconst App: React.FC = () => {\n\n  const [columns, setColumns] = useState(startingColumns)\n\n  const addToColumn = (card: Card, colId: string) => {\n    setColumns(columns.map(col => {\n      if(col.id === colId) {\n        // replace the cards with new cards (or logic for replacing 1 card)\n        let newCards = [...col.cards]\n        newCards.push(card)\n        col.cards = newCards\n      }\n      return col\n    }))\n  }\n\n  const updateColumn = (cardId: string, colId: string, left:boolean=false) => {\n    // set new cards for column\n    setColumns(columns.map(col => {\n      if(col.id === colId) {\n        // replace the cards with new cards (or logic for replacing 1 card)\n        let newCards = [...col.cards]\n        let cardIndex = newCards.findIndex(card => card.id === cardId)\n        // dispatch move action using the newCards[cardIndex]\n        if(left)\n          sendCardBackward(colId, newCards[cardIndex])\n        else \n          sendCardForward(colId, newCards[cardIndex])\n        let cards = newCards.slice(0, cardIndex).concat(newCards.slice(cardIndex+1, col.cards.length))\n        col.cards = cards\n      }\n      return col\n    }))\n  }\n\n  const sendCardBackward = (colId: string, card: Card) => {\n    console.log('card to send:', card)\n    let newCols = columns\n    let flag = false\n    for(let i=newCols.length-1; i>=0; i--) {\n      if(flag) {\n        // add card to array\n        newCols[i].cards.push(card)\n        flag=false\n        break\n      }\n      if(newCols[i].id === colId) {\n        // set flag for next\n        flag = true\n      }\n    }\n    setColumns(newCols)\n    console.log('set new columns:', columns)\n  }\n\n  const sendCardForward = (colId: string, card: Card) => {\n    console.log('card to send:', card)\n    let newCols = columns\n    let flag=false\n    for(let i=0; i<newCols.length; i++) {\n      if(flag) {\n        newCols[i].cards.push(card)\n        flag=false\n        break\n      }\n      if(newCols[i].id === colId) {\n        flag=true\n      }\n    }\n    setColumns(newCols)\n    console.log('set new columns:', columns)\n  }\n\n  return (\n    <div style={{background: '#ECEEEE', margin: '0', padding: '0', width: '100vw',\n      minHeight:'100vh'}}>\n      <BoardWrapper>\n        {columns.map(col => (\n          <Column column={col} addToColumn={addToColumn} updateColumn={updateColumn} />\n        ))}\n      </BoardWrapper>\n    </div>\n    \n  );\n}\n\nexport default App;\n\nconst BoardWrapper = styled.div`\n  width: calc(100vw - 50px);\n  display: flex;\n  justify-content: center;\n  margin-left: 25px;\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}